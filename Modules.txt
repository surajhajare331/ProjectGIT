Modules:

CODE - Management 
Easy to Debugg
Security
Code Complexity
Space Complexity
Code Reusablity


import modulename

modulename.variable
modulename.functionname
modulename.classname


--------------------------------------------------------------

from modulename import functionname,variablename,classname

----------------------------------------------------------------
from modulename import *
------------------------------------------------------------------
from modulename import functioname  as fun1

----------------------------------------------------------------------
Packages :

Packages is collection of modules

Packages   DIR    git Repo
moduels    files   collection files tracking | files
__init__.py         .git 


. start -- hidden dir 

Project 

CREDIT -- Platinum --  test.py,sample.py,
Package --  Package  -- modules

LOAN  --  PersonalLoan


ARGI -- 

setup.py -- entry gate 


main.py 



Types of modules | Packages
1.Inbuilt Modules ,Packages -- install -- > PYPI
2.Custom modules| User defined | Packages


inbuilt --  pip install packages|moduels==ver

pip install pandas 
pip install numpy

pip install pypdf2


uninstall :

pip uninstall pandas
pip uninstall numpy



-----------------------------------------------------------------------------------------

OS modules :
inbuilt module -- : To use OS Utility

OS function --> FOLDER | DELETE | COPY | 









import os
print(os.getcwd())
os.chdir(r'C:\Users\kanti\OneDrive\Desktop\File Handling')
print(os.getcwd())

data  = os.listdir('.')

for file in data:
    if file.startswith('a'):
        print(file)
import os
def files_filter(dir):
    files = [file for file in os.listdir(r'{}'.format(dir)) if file.endswith('.csv')]
    return files

def delete_file(sdir,filename):
    print("Deleting File ..{}".format(filename))
    os.remove(r"{}/{}".format(sdir,filename))
    return True


def file_write(data,sdir,ddir,filename):
    with open(r'{}/{}'.format(ddir,filename),'w') as fp:
        fp.write(data)
    status = delete_file(sdir,filename)
    return status


def files_content_read(sdir,ddir,filename):
    with open(r'{}/{}'.format(sdir,filename)) as fp:
        data = fp.read()
    st = file_write(data,sdir,ddir,filename)
    return st


def main():
    source_dirname = 'source_dir'
    destination_dir = 'destination_dir'
    csvfiles = files_filter(source_dirname)
    if csvfiles:
        for file in csvfiles:
            st = files_content_read(source_dirname,destination_dir,file)


        print("All files moved to Destination Folder")
    else:
        print("Source Folder Empty[No CSV]")
main()

import os

ddir = 'destination_dir'

def delete_files(filename):
    os.remove(r'{}/{}'.format(ddir,filename))


def main():
    files  = [file for file in os.listdir('destination_dir')]
    t = list(map(delete_files,files))
    print(t)

main()


import os,shutil

os.rename('test.csv','sample.csv')

import os
import logging
from logging import exception

logging.basicConfig(filename='dailyrun.log',level=logging.INFO,
                    format='%(levelname)s:%(name)s:%(asctime)s:%(message)s',
                    datefmt='%d:%m:%Y %I:%M:%S')
def files_filter(dir):
    logging.info("filtering dir {} ".format(dir))
    files = [file for file in os.listdir(r'{}'.format(dir)) if file.endswith('.csv')]
    logging.info("filtering done..")
    return files

def delete_file(sdir,filename):
    logging.info("Deleting File ..{}".format(filename))
    os.remove(r"{}/{}".format(sdir,filename))
    return True


def file_write(data,sdir,ddir,filename):
    logging.info("writing file {}".format(filename))
    try:
        with open(r'{}/{}'.format(ddir,filename),'w') as fp:
            fp.write(data)
        status = delete_file(sdir,filename)
    except Exception as e:
        logging.critical("issue in writing file {}".format(filename))
        logging.exception(e)
    return status


def files_content_read(sdir,ddir,filename):
    try:
        with open(r'{}/{}'.format(sdir,filename)) as fp:
            data = fp.read()
            logging.info("reading successfully")
        st = file_write(data,sdir,ddir,filename)
    except:
        logging.critical("issue in reading file content {}".format(filename))

    return st


def main():
    try:
        source_dirname = 'source_dir'
        destination_dir = 'destination_dir'
        logging.info("Source Dir {}".format(source_dirname))
        logging.info("Destination Dir {}".format(destination_dir))
        csvfiles = files_filter(source_dirname)
        logging.info("csv files in source dir {} ".format(csvfiles))
        if csvfiles:
            for file in csvfiles:
                logging.info("reading file csv {}".format(file))
                st = files_content_read(source_dirname,destination_dir,file)



            logging.info("All files moved to Destination Folder")
        else:
            logging.info("no csv files in given dir")
    except Exception as e:
        logging.exception(e)
    logging.info("All Processed")
if __name__=='__main__':
    main()








Directive

Meaning

Notes

%a

Locale’s abbreviated weekday name.

%A

Locale’s full weekday name.

%b

Locale’s abbreviated month name.

%B

Locale’s full month name.

%c

Locale’s appropriate date and time representation.

%d

Day of the month as a decimal number [01,31].

%f

Microseconds as a decimal number
[000000,999999].

(1)

%H

Hour (24-hour clock) as a decimal number [00,23].

%I

Hour (12-hour clock) as a decimal number [01,12].

%j

Day of the year as a decimal number [001,366].

%m

Month as a decimal number [01,12].

%M

Minute as a decimal number [00,59].

%p

Locale’s equivalent of either AM or PM.

(2)

%S

Second as a decimal number [00,61].

(3)

%U

Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0.

(4)

%u

Day of the week (Monday is 1; Sunday is 7) as a decimal number [1, 7].

%w

Weekday as a decimal number [0(Sunday),6].

%W

Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.

(4)

%x

Locale’s appropriate date representation.

%X

Locale’s appropriate time representation.

%y

Year without century as a decimal number [00,99].

%Y

Year with century as a decimal number.

%z

Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. [1]

%Z

Time zone name (no characters if no time zone exists). Deprecated. [1]

%G

ISO 8601 year (similar to %Y but follows the rules for the ISO 8601 calendar year). The year starts with the week that contains the first Thursday of the calendar year.

%V

ISO 8601 week number (as a decimal number [01,53]). The first week of the year is the one that contains the first Thursday of the year. Weeks start on Monday.

%%

A literal '%' character.



Link :  https://docs.python.org/3/library/time.html#time.strftime






















